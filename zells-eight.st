TextMorph subclass: #ZAddress	instanceVariableNames: 'sender receiver connector nodeColor observers'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZAddress methodsFor: 'layout' stamp: 'NM 9/6/2018 20:35'!clearObservers	observers removeAll.! !!ZAddress methodsFor: 'layout' stamp: 'NM 9/6/2018 20:17'!delete	super delete.	observers do: [:os| os do: [:o| (o key = #removed) ifTrue: [o value value]]].! !!ZAddress methodsFor: 'layout' stamp: 'NM 9/6/2018 20:21'!justGrabbedFrom: formerOwner	super justGrabbedFrom: formerOwner.	observers do: [:os| os do: [:o| (o key = #removed) ifTrue: [o value value]]].! !!ZAddress methodsFor: 'layout' stamp: 'NM 9/6/2018 20:42'!keyStroke: evt	| before |	before := self contents asString.		super keyStroke: evt.		observers do: [:os| os do: [:o| (o key = #changed) ifTrue: [o value value: before]]].	Collection! !!ZAddress methodsFor: 'layout' stamp: 'NM 9/10/2018 15:39'!mouseDown: evt	(evt shiftPressed) 		ifTrue: [			evt hand grabMorph: ((self owner isKindOf: ZMeshNode)				ifTrue: [ZAddress new copyOf: self]				ifFalse: [self])]		ifFalse: [			super mouseDown: evt].! !!ZAddress methodsFor: 'layout' stamp: 'NM 9/5/2018 20:10'!mouseUp: evt	editor isNil ifFalse: [super mouseUp: evt].! !!ZAddress methodsFor: 'layout' stamp: 'NM 9/6/2018 15:42'!nodeColor	^ nodeColor! !!ZAddress methodsFor: 'layout' stamp: 'NM 9/5/2018 20:15'!nodeColor: aColor	nodeColor := aColor.! !!ZAddress methodsFor: 'layout' stamp: 'NM 9/6/2018 15:32'!observe: aBlock	observers add: aBlock.! !!ZAddress methodsFor: 'testing' stamp: 'NM 9/6/2018 15:43'!copyOf: anAddress	self contents: anAddress contents asString.	self position: anAddress position.	nodeColor := anAddress nodeColor.! !!ZAddress methodsFor: 'testing' stamp: 'NM 9/5/2018 20:38'!drawOn: aCanvas	aCanvas fillRectangle: self outerBounds color: (nodeColor mixed: 0.6 with: Color black).	super drawOn: aCanvas.! !!ZAddress methodsFor: 'testing' stamp: 'NM 9/5/2018 15:33'!matches: aString	^ self contents asString = aString.! !!ZAddress methodsFor: 'testing' stamp: 'NM 9/5/2018 20:57'!value	^ self contents asString.! !!ZAddress methodsFor: 'initialization' stamp: 'NM 9/6/2018 20:56'!initialize	super initialize.		nodeColor := Color silver.	observers := Set new.		self color: Color white.! !Morph subclass: #ZChannel	instanceVariableNames: 'sender receiver connector speed transmissions'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZChannel methodsFor: 'submorphs-add/remove' stamp: 'NM 9/5/2018 13:19'!delete	super delete.	self close.! !!ZChannel methodsFor: 'drawing' stamp: 'NM 9/11/2018 16:42'!drawOn: aCanvas	| from |	from := self onBorderBetween: connector and: sender.	aCanvas 		line: from		to: connector center		color: self color.	transmissions do: [:t|		aCanvas			line: from + ((connector center - from) * ((t-10 max: 0)/100))			to: from + ((connector center - from) * ((t+10 min: 100)/100))			width: 2			color: (self color mixed: 0.5 with: Color white)].! !!ZChannel methodsFor: 'drawing' stamp: 'NM 9/5/2018 11:44'!onBorderBetween: a and: b	^ a center 		+ ((b center - a center) normalized * ((a center dist: b center) 		- ((b width min: b height) / 2)))! !!ZChannel methodsFor: 'initialization' stamp: 'NM 9/11/2018 16:17'!initialize	super initialize.		transmissions := OrderedCollection new.	speed := 10.		connector := ZChannelConnector new channel: self.	ActiveWorld addMorphBack: self.! !!ZChannel methodsFor: 'geometry' stamp: 'NM 9/5/2018 11:50'!outerBounds	^ super outerBounds outsetBy: 2! !!ZChannel methodsFor: 'signalling' stamp: 'NM 9/5/2018 13:19'!close	sender close: self.	connector owner ifNotNil: [connector delete].! !!ZChannel methodsFor: 'signalling' stamp: 'NM 9/11/2018 16:33'!transmit: aSignal	receiver ifNotNil: [		[			transmissions add: 0.			(Delay forMilliseconds: 1000/ZChannel speed) wait.			receiver receive: aSignal		] fork	] ! !!ZChannel methodsFor: 'events-processing' stamp: 'NM 9/5/2018 11:44'!rejectsEvent: evt	^ true.! !!ZChannel methodsFor: 'stepping and presenter' stamp: 'NM 9/11/2018 16:33'!step	self bounds: (Rectangle 		center: (sender center + connector center) / 2 		extent: (sender center - connector center) abs).			self visible: (sender owner notNil and: [connector owner notNil] and: [connector owner owner notNil]).		transmissions := (transmissions collect: [:t|t+(ZChannel speed * 2)]) select: [:t|t <= 100].! !!ZChannel methodsFor: 'stepping and presenter' stamp: 'NM 9/11/2018 16:43'!stepTime	^ 20! !!ZChannel methodsFor: 'accessing' stamp: 'NM 9/5/2018 11:43'!connector	^ connector! !!ZChannel methodsFor: 'accessing' stamp: 'NM 9/5/2018 11:45'!receiver: aNode	receiver := aNode.		connector owner ifNil: [receiver addMorph: (connector center: receiver center)]! !!ZChannel methodsFor: 'accessing' stamp: 'NM 9/5/2018 11:44'!sender: aNode	sender := aNode.		self color: sender color.	connector color: sender color.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ZChannel class	instanceVariableNames: ''!!ZChannel class methodsFor: 'as yet unclassified' stamp: 'NM 9/11/2018 17:06'!speed	^ 10! !Morph subclass: #ZChannelConnector	instanceVariableNames: 'channel'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZChannelConnector methodsFor: 'submorphs-add/remove' stamp: 'NM 9/5/2018 13:19'!delete	super delete.	channel close.! !!ZChannelConnector methodsFor: 'initialization' stamp: 'NM 9/5/2018 11:43'!initialize	super initialize.	self extent: 10@10.! !!ZChannelConnector methodsFor: 'dropping/grabbing' stamp: 'NM 9/10/2018 16:10'!justDroppedInto: aMorph event: anEvent	(aMorph isKindOf: ZNode) 		ifTrue: [channel receiver: aMorph]		ifFalse: [self delete]! !!ZChannelConnector methodsFor: 'accessing' stamp: 'NM 9/5/2018 11:43'!channel: aChannel	channel := aChannel.! !Morph subclass: #ZNode	instanceVariableNames: 'flashing'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZNode methodsFor: 'as yet unclassified' stamp: 'NM 9/11/2018 11:19'!delete	submorphs do: [:s | s delete].	super delete.! !!ZNode methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 15:42'!drawOn: aCanvas	aCanvas fillOval: self bounds color: (flashing 		ifTrue: [(self color mixed: 0.5 with: Color white) alpha: 0.2]		ifFalse: [self color alpha: 0.1]).	aCanvas frameOval: self bounds width: 3 color: self color.! !!ZNode methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 15:43'!flash	[		flashing := true.		self invalidRect: self bounds.				(Delay forMilliseconds: 100) wait.				flashing := false.		self invalidRect: self bounds.	] fork.! !!ZNode methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 15:42'!initialize	super initialize.		self extent: 70@70.	self color: (((Color wheel: 24) atRandom) mixed: 0.7 with: Color white).		flashing := false.! !!ZNode methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 15:43'!receive: aSignal	self flash.! !!ZNode methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 16:09'!wantsDroppedMorph: aMorph event: evt	^ aMorph isKindOf: ZChannelConnector.! !ZNode subclass: #ZMeshNode	instanceVariableNames: 'address channels received'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZMeshNode methodsFor: 'signalling' stamp: 'NM 9/5/2018 21:15'!address	^ address! !!ZMeshNode methodsFor: 'signalling' stamp: 'NM 9/11/2018 11:45'!address: aString	address ifNotNil: [address delete].	aString ifNil: [address := nil. ^ self].		address := ZAddress new 		nodeColor: self color;		contents: aString;		observe: {#changed -> [:before| self addressChangedFrom: before]}.	self addMorph: address.	self positionAddress.! !!ZMeshNode methodsFor: 'signalling' stamp: 'NM 9/6/2018 21:05'!addressChangedFrom: before	self positionAddress.! !!ZMeshNode methodsFor: 'signalling' stamp: 'NM 9/5/2018 19:59'!alreadyReceived: aSignal	self find: #id in: aSignal		ifFound: [:id|			(received includes: id) ifTrue: [^ true].						received add: id.			^ false]		ifNone: [^ true].! !!ZMeshNode methodsFor: 'signalling' stamp: 'NM 9/5/2018 13:20'!close: aChannel	channels remove: aChannel ifAbsent: [].	aChannel owner ifNotNil: [aChannel delete].! !!ZMeshNode methodsFor: 'signalling' stamp: 'NM 9/6/2018 15:38'!color: aColor	super color: aColor.		address ifNotNil: [address nodeColor: self color].! !!ZMeshNode methodsFor: 'signalling' stamp: 'NM 9/5/2018 20:02'!find: key in: aCollection ifFound: foundBlock	self find: key in: aCollection ifFound: foundBlock ifNone: []! !!ZMeshNode methodsFor: 'signalling' stamp: 'NM 9/10/2018 14:37'!find: key in: aCollection ifFound: foundBlock ifNone: noneBlock	(aCollection isKindOf: Collection) ifFalse: [^ noneBlock value].		aCollection detect: [:e| 			(e isKindOf: Association) 			and: [e key asLowercase = key asLowercase]		]	ifFound: [:found| foundBlock value: found value]	ifNone: noneBlock! !!ZMeshNode methodsFor: 'signalling' stamp: 'NM 9/6/2018 19:43'!inContainer: aString	address contents: aString , '/' , address contents asString.	self positionAddress.! !!ZMeshNode methodsFor: 'signalling' stamp: 'NM 9/10/2018 13:24'!isForMe: aSignal	address ifNil: [^ false].		self find: #to in: aSignal		ifFound: [:to| ^ self isMe: to]		ifNone: [^ false].! !!ZMeshNode methodsFor: 'signalling' stamp: 'NM 9/10/2018 13:24'!isMe: aString	^ address matches: aString! !!ZMeshNode methodsFor: 'signalling' stamp: 'NM 9/10/2018 14:05'!isValid: aSignal	^ (aSignal isKindOf: Collection)		and: [aSignal contains: [:e| (e isKindOf: Association) and: [e key asLowercase = #id]]]		and: [aSignal contains: [:e| (e isKindOf: Association) and: [e key asLowercase = #message]]].! !!ZMeshNode methodsFor: 'signalling' stamp: 'NM 9/5/2018 11:49'!openChannel	| channel |	channel := ZChannel new sender: self.	channels add: channel.	^ channel.! !!ZMeshNode methodsFor: 'signalling' stamp: 'NM 9/6/2018 20:08'!outOfContainer: aString	address contents: (address contents asString allButFirst: aString size + 1).	self positionAddress.! !!ZMeshNode methodsFor: 'signalling' stamp: 'NM 9/6/2018 15:36'!positionAddress	address ifNotNil: [address center: self bottomCenter + (0@5) + (0@address height / 2)].! !!ZMeshNode methodsFor: 'signalling' stamp: 'NM 9/11/2018 17:05'!receive: aSignal	(self isValid: aSignal) ifFalse: [^ nil].	(self alreadyReceived: aSignal) ifTrue: [^ nil].	channels do: [:c| c transmit: aSignal].		self find: #message in: aSignal ifFound: [:message|		(self isForMe: message) ifTrue: [			super receive: aSignal.			self receiveMessage: message]]! !!ZMeshNode methodsFor: 'signalling' stamp: 'NM 9/10/2018 14:36'!receiveMessage: message	self find: #content in: message ifFound: [:content| 		self receiveMessageContent: content.				self find: #from in: message ifFound: [:from|			self receiveMessageContent: content from: from].].! !!ZMeshNode methodsFor: 'signalling' stamp: 'NM 9/10/2018 14:36'!receiveMessageContent: content	self find: #out in: content ifFound: [:out|		self outOfContainer: out].		self find: #in in: content ifFound: [:in|		self inContainer: in]! !!ZMeshNode methodsFor: 'signalling' stamp: 'NM 9/11/2018 14:21'!receiveMessageContent: content from: sender	(content = #asMessage) ifTrue: [		self serialize then: [:serialized| self sendContent: serialized to: sender]].! !!ZMeshNode methodsFor: 'signalling' stamp: 'NM 9/10/2018 14:33'!serialize	^ Promise unit: nil! !!ZMeshNode methodsFor: 'submorphs-add/remove' stamp: 'NM 9/11/2018 11:19'!delete	channels do: [:c | c connector delete].	super delete.! !!ZMeshNode methodsFor: 'submorphs-add/remove' stamp: 'NM 9/10/2018 15:40'!send: message	self receive: {		#ID -> ZMeshNode nextId.		#message -> message}.! !!ZMeshNode methodsFor: 'submorphs-add/remove' stamp: 'NM 9/11/2018 11:41'!sendContent: content	self sendContent: content to: nil.! !!ZMeshNode methodsFor: 'submorphs-add/remove' stamp: 'NM 9/11/2018 11:41'!sendContent: content to: receiver	self sendContent: content to: receiver from: address value.! !!ZMeshNode methodsFor: 'submorphs-add/remove' stamp: 'NM 9/11/2018 14:26'!sendContent: content to: receiver from: sender	self send: ([:message|			receiver ifNotNil: [message add: #to -> receiver].			sender ifNotNil: [message add: #from -> sender].			message add: #content -> content.			message asArray		] value: Set new).! !!ZMeshNode methodsFor: 'submorphs-add/remove' stamp: 'NM 9/11/2018 16:46'!sendContent: content to: receiver withReply: reaction	| response |	response := ZDynamicNode new 		address: address value , '/reply' , (1 to: 10000) atRandom;		reaction: [:message|			reaction value: message.			response delete].			self openChannel receiver: response.	self sendContent: content to: receiver from: response address value.! !!ZMeshNode methodsFor: 'drawing' stamp: 'NM 9/5/2018 13:51'!fullBounds	^ super fullBounds outsetBy: 100.! !!ZMeshNode methodsFor: 'drawing' stamp: 'NM 9/5/2018 13:52'!outerBounds	^ super outerBounds outsetBy: 10.! !!ZMeshNode methodsFor: 'initialization' stamp: 'NM 9/11/2018 11:06'!initialize	super initialize.		self extent: 70@70.	self color: (((Color wheel: 24) atRandom) mixed: 0.7 with: Color white).		flashing := false.	channels := Set new.	received := Set new.! !!ZMeshNode methodsFor: 'dropping/grabbing' stamp: 'NM 9/6/2018 15:35'!extent: aPoint	super extent: aPoint.	self positionAddress.! !!ZMeshNode methodsFor: 'dropping/grabbing' stamp: 'NM 9/5/2018 11:48'!handlesMouseDown: evt	^ evt shiftPressed.! !!ZMeshNode methodsFor: 'dropping/grabbing' stamp: 'NM 9/5/2018 11:48'!mouseDown: evt	(evt shiftPressed) ifFalse: [^ nil].		evt hand grabMorph: (self openChannel connector 		center: evt position).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ZMeshNode class	instanceVariableNames: ''!!ZMeshNode class methodsFor: 'as yet unclassified' stamp: 'NM 9/5/2018 20:54'!nextId	^ (DateAndTime now asUnixTime * 1000) + (1 to: 1000) atRandom! !ZMeshNode subclass: #ZContainerNode	instanceVariableNames: 'inhabitants'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZContainerNode methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 14:11'!addInhabitant: aString	inhabitants add: aString.	self sendContent: {#in -> address value} to: aString.! !!ZContainerNode methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 14:12'!addressChangedFrom: before	super addressChangedFrom: before.		inhabitants do: [:inhabitant|		self sendContent: {#out -> before . #in -> address value} to: before , '/' , inhabitant].! !!ZContainerNode methodsFor: 'as yet unclassified' stamp: 'NM 9/6/2018 21:15'!drawOn: aCanvas	super drawOn: aCanvas.		1 to: inhabitants size do: [:i| 		aCanvas frameOval: (Rectangle center: (self leftCenter + ((i*15)@0)) extent: 10) width: 2 color: Color white]! !!ZContainerNode methodsFor: 'as yet unclassified' stamp: 'NM 9/6/2018 19:06'!initialize	super initialize.		inhabitants := Set new.! !!ZContainerNode methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 14:23'!receiveMessageContent: content	super receiveMessageContent: content.	self find: #add in: content ifFound: [:a|		self addInhabitant: a].		self find: #remove in: content ifFound: [:a|		self removeInhabitant: a].! !!ZContainerNode methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 14:11'!receiveMessageContent: content from: sender	super receiveMessageContent: content from: sender.	(content = 'inhabitants?') ifTrue: [		self sendContent: {#inhabitants -> inhabitants} to: sender].! !!ZContainerNode methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 14:11'!removeInhabitant: aString	(inhabitants includes: aString) ifTrue: [		inhabitants remove: aString.		self sendContent: {#out -> address value} to: address value , '/' , aString].! !!ZContainerNode methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 14:41'!serialize	^ self serializeInhabitants: Promise new.! !!ZContainerNode methodsFor: 'as yet unclassified' stamp: 'NM 9/11/2018 15:59'!serializeInhabitants: aPromise	| resolved |	resolved := Set new.		inhabitants do: [:inhabitant|		self sendContent: #asMessage to: (address value , '/' , inhabitant) withReply: [:message|			self find: #content in: message ifFound: [:content|				resolved add: inhabitant -> content.				(resolved size = inhabitants size) ifTrue: [					aPromise resolveWith: resolved asArray]]]].		^ aPromise! !ZMeshNode subclass: #ZDynamicNode	instanceVariableNames: 'reaction'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZDynamicNode methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 16:16'!reaction: aBlock	reaction := aBlock.! !!ZDynamicNode methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 14:55'!receiveMessage: message	super receiveMessage: message.		reaction ifNotNil: [reaction value: message].! !ZMeshNode subclass: #ZEchoNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZEchoNode methodsFor: 'as yet unclassified' stamp: 'NM 9/11/2018 16:04'!receiveMessageContent: content from: sender	super receiveMessageContent: content from: sender.		self sendContent: content , ' echo' to: sender.! !ZMeshNode subclass: #ZPortal	instanceVariableNames: 'body pointedAt marginSize headSize'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/6/2018 19:29'!acceptDroppingMorph: aMorph event: evt	(aMorph isKindOf: ZAddress) ifTrue: [		^ self pointAt: aMorph].			super acceptDroppingMorph: aMorph event: evt! !!ZPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/5/2018 19:36'!buildBody	^ Morph new			color: Color black;			extent: 200@100.! !!ZPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/5/2018 16:08'!drawIconOn: aCanvas in: aRect	aCanvas fillRectangle: aRect color: Color black.! !!ZPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/5/2018 21:06'!drawOn: aCanvas	aCanvas fillRectangle: self bounds color: (flashing ifTrue: [Color white] ifFalse: [self color]).	self drawIconOn: aCanvas in: (self topLeft + (marginSize@marginSize) extent: headSize).! !!ZPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/5/2018 20:47'!extent: aPoint	super extent: aPoint. 	body ifNotNil: [body extent: self extent - ((marginSize * 2)@(marginSize * 3 + headSize))].! !!ZPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/6/2018 15:36'!initialize		marginSize := 5.	headSize := 20.		super initialize.		self color: Color silver.	self extent: 200@100.		body := self buildBody.	self addMorph: body.		self updateLayout.! !!ZPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/5/2018 20:58'!pointAt: anAddress	self pointAway.		pointedAt := anAddress.	self addMorph: pointedAt.		headSize := pointedAt height.	pointedAt position: self position + ((headSize + (marginSize * 2))@marginSize).	self updateLayout.! !!ZPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/5/2018 20:58'!pointAway	pointedAt ifNotNil: [		pointedAt delete.		pointedAt := nil].! !!ZPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/11/2018 11:38'!sendContent: content	pointedAt isNil		ifTrue: [super sendContent: content]		ifFalse: [self sendContent: content to: pointedAt value].! !!ZPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/5/2018 20:50'!updateLayout	body ifNotNil: [		self extent: body extent + ((marginSize * 2)@(headSize + (marginSize * 3))).		body position: self position + (marginSize@(headSize + (marginSize * 2)))].! !!ZPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/5/2018 20:23'!wantsDroppedMorph: aMorph event: evt	^ (super wantsDroppedMorph: aMorph event: evt)			or: [aMorph isKindOf: ZAddress].! !ZPortal subclass: #ZContainerPortal	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZContainerPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 14:13'!acceptDroppingMorph: aMorph event: evt	((aMorph isKindOf: ZAddress) and: [body bounds containsPoint: evt position]) 		ifTrue: [			self addInhabitant: aMorph.			self sendContent: {#add -> aMorph value}]		ifFalse: [			super acceptDroppingMorph: aMorph event: evt]! !!ZContainerPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 14:14'!addInhabitant: anAddress	(body submorphs contains: [:s| (pointedAt value , '/' , s value) = anAddress value]) ifTrue: [		^ nil].		body addMorph: anAddress.	anAddress observe: {		#removed -> [			self removeInhabitant: anAddress].		#changed -> [:before| 			self removeInhabitant: (ZAddress new contents: before).			self sendContent: {#add -> anAddress value}]}.! !!ZContainerPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/6/2018 21:19'!drawIconOn: aCanvas in: aRect	aCanvas frameOval: aRect width: 3 color: Color black.	aCanvas frameOval: (Rectangle center: aRect center - (aRect width / 6@0) extent: 6) width: 2 color: Color black.	aCanvas frameOval: (Rectangle center: aRect center + (aRect width / 6@0) extent: 6) width: 2 color: Color black.! !!ZContainerPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 14:14'!pointAt: anAddress	super pointAt: anAddress.		self sendContent: 'inhabitants?'.! !!ZContainerPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/6/2018 20:59'!pointAway	super pointAway.		body removeAllMorphs.! !!ZContainerPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 14:39'!receiveMessageContent: content	super receiveMessageContent: content.	self find: #inhabitants in: content ifFound: [:inhabitants|		body removeAllMorphs.		inhabitants do: [:inhabitant|			self addInhabitant: (ZAddress new				contents: inhabitant;				position: body position + ((body submorphs size * 50 + 10)@10))]].! !!ZContainerPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 14:14'!removeInhabitant: anAddress	anAddress clearObservers.	self sendContent: {#remove -> anAddress value}.! !ZPortal subclass: #ZSenderPortal	instanceVariableNames: 'contexts'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZSenderPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 11:49'!acceptDroppingMorph: aMorph event: evt	((aMorph isKindOf: ZAddress) and: [body bounds containsPoint: evt position]) 		ifTrue: [			self serializeAndSend: aMorph]		ifFalse: [			super acceptDroppingMorph: aMorph event: evt]! !!ZSenderPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 11:45'!drawIconOn: aCanvas in: aRect	aCanvas frameOval: (Rectangle center: aRect center + (-5@0) extent: 6) width: 2 color: Color black.	aCanvas clipBy: (aRect left: aRect center x - 2) during: [:c|		c frameOval: (Rectangle center: aRect center + (-5@0) extent: 16) width: 2 color: Color black.		c frameOval: (Rectangle center: aRect center + (-5@0) extent: 26) width: 2 color: Color black].! !!ZSenderPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 12:12'!initialize	super initialize.		contexts := Dictionary new.! !!ZSenderPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 14:21'!isMe: aString	^ (super isMe: aString)		or: [address value , '/send' = aString]! !!ZSenderPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 14:36'!receiveMessage: message	super receiveMessage: message.		self find: #to in: message ifFound: [:to|		(address value , '/send' = to) ifTrue: [			self find: #content in: message ifFound: [:content|				self send: content]]]! !!ZSenderPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 13:44'!receiveMy: aSignal	super receiveMy: aSignal.		self find: #to in: aSignal ifFound: [:to|		(contexts includesKey: to) ifTrue: [			self find: #body in: aSignal ifFound: [:body |				(contexts at: to) value: body]]]! !!ZSenderPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 14:17'!serializeAndSend: anAddress	self sendContent: #asMessage to: anAddress value from: address value , '/send'.! !ZMeshNode subclass: #ZTextNode	instanceVariableNames: 'value'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZTextNode methodsFor: 'as yet unclassified' stamp: 'NM 9/6/2018 15:45'!drawOn: aCanvas	super drawOn: aCanvas.	value ifNotNil: [		aCanvas drawString: value at: self leftCenter - (-10@10) font: nil color: Color white].! !!ZTextNode methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 14:15'!receiveMessageContent: content	super receiveMessageContent: content.	self find: #set in: content ifFound: [:s|		self setText: s]! !!ZTextNode methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 14:34'!serialize	^ Promise unit: value! !!ZTextNode methodsFor: 'as yet unclassified' stamp: 'NM 9/5/2018 20:05'!setText: aString	value := aString.! !ZPortal subclass: #ZTextPortal	instanceVariableNames: 'text'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZTextPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/5/2018 20:34'!buildBody		text := TextMorph new		contents: 'text';		color: Color white;		on: #keyUp send: #textChanged to: self;		yourself.			^ super buildBody			addMorph: text! !!ZTextPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/5/2018 21:08'!drawIconOn: aCanvas in: aRect	| r |	r := aRect insetBy: 4.	aCanvas line: r topLeft to: r topRight width: 4 color: Color black.	aCanvas line: r bottomCenter to: r topCenter width: 4 color: Color black.! !!ZTextPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/5/2018 20:44'!extent: aPoint	super extent: aPoint. 	self positionText.! !!ZTextPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/5/2018 20:34'!initialize	super initialize.			self positionText.! !!ZTextPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/5/2018 19:42'!positionText	body ifNotNil: [text position: body position + (body extent / 2) - (text extent / 2)].! !!ZTextPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 14:15'!setText: aString	self sendContent: {#set -> aString}.! !!ZTextPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/5/2018 20:56'!textChanged	self setText: text contents asString.	self positionText.! !ZNode subclass: #ZTranscriptNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZTranscriptNode methodsFor: 'as yet unclassified' stamp: 'NM 9/11/2018 11:17'!drawOn: aCanvas	super drawOn: aCanvas.	aCanvas fillRectangle: (self bounds insetBy: 25) color: Color black.! !!ZTranscriptNode methodsFor: 'as yet unclassified' stamp: 'NM 9/11/2018 11:30'!receive: aSignal	super receive: aSignal.		Transcript show: aSignal; cr.! !ZPortal subclass: #ZTranscriptPortal	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZTranscriptPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/5/2018 19:47'!buildBody	^ Morph new			color: Color black;			extent: 100@70.! !!ZTranscriptPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/5/2018 19:47'!receive: aSignal	super receive: aSignal.	Transcript show: 'Received: ' , aSignal; cr.! !