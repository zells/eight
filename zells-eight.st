Morph subclass: #ZChannel	instanceVariableNames: 'sender receiver connector speed transmissions'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZChannel methodsFor: 'submorphs-add/remove' stamp: 'NM 9/5/2018 13:19'!delete	super delete.	self close.! !!ZChannel methodsFor: 'drawing' stamp: 'NM 9/12/2018 19:08'!drawOn: aCanvas	| from to |	from := self onBorderBetween: connector and: sender.	to := connector center.		aCanvas line: from to: to color: self color.			transmissions do: [:t|					aCanvas			line: from + ((to - from) * ((t-10 max: 0)/100)) rounded			to: from + ((to - from) * ((t+10 min: 100)/100)) rounded			width: 2			color: (self color mixed: 0.8 with: Color white)].! !!ZChannel methodsFor: 'drawing' stamp: 'NM 9/5/2018 11:44'!onBorderBetween: a and: b	^ a center 		+ ((b center - a center) normalized * ((a center dist: b center) 		- ((b width min: b height) / 2)))! !!ZChannel methodsFor: 'initialization' stamp: 'NM 9/11/2018 16:17'!initialize	super initialize.		transmissions := OrderedCollection new.	speed := 10.		connector := ZChannelConnector new channel: self.	ActiveWorld addMorphBack: self.! !!ZChannel methodsFor: 'geometry' stamp: 'NM 9/12/2018 19:11'!outerBounds	^ super outerBounds outsetBy: 2! !!ZChannel methodsFor: 'signalling' stamp: 'NM 9/5/2018 13:19'!close	sender close: self.	connector owner ifNotNil: [connector delete].! !!ZChannel methodsFor: 'signalling' stamp: 'NM 9/12/2018 16:15'!transmit: aSignal	receiver ifNotNil: [		transmissions add: 0.		(receiver future: 1000 / ZChannel speed) receive: aSignal	] ! !!ZChannel methodsFor: 'events-processing' stamp: 'NM 9/5/2018 11:44'!rejectsEvent: evt	^ true.! !!ZChannel methodsFor: 'stepping and presenter' stamp: 'NM 9/12/2018 09:09'!step	self bounds: (Rectangle 		center: (sender center + connector center) / 2 		extent: (sender center - connector center) abs).			self visible: (sender owner notNil and: [connector owner notNil] and: [connector owner owner notNil]).		transmissions := (transmissions collect: [:t|t+(ZChannel speed * 2)]) select: [:t|t <= 100].		self invalidRect: self outerBounds.! !!ZChannel methodsFor: 'stepping and presenter' stamp: 'NM 9/12/2018 09:08'!stepTime	^ 20! !!ZChannel methodsFor: 'accessing' stamp: 'NM 9/5/2018 11:43'!connector	^ connector! !!ZChannel methodsFor: 'accessing' stamp: 'NM 9/5/2018 11:45'!receiver: aNode	receiver := aNode.		connector owner ifNil: [receiver addMorph: (connector center: receiver center)]! !!ZChannel methodsFor: 'accessing' stamp: 'NM 9/5/2018 11:44'!sender: aNode	sender := aNode.		self color: sender color.	connector color: sender color.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ZChannel class	instanceVariableNames: ''!!ZChannel class methodsFor: 'as yet unclassified' stamp: 'NM 9/12/2018 09:10'!speed	^ 5! !Morph subclass: #ZChannelConnector	instanceVariableNames: 'channel'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZChannelConnector methodsFor: 'submorphs-add/remove' stamp: 'NM 9/5/2018 13:19'!delete	super delete.	channel close.! !!ZChannelConnector methodsFor: 'initialization' stamp: 'NM 9/5/2018 11:43'!initialize	super initialize.	self extent: 10@10.! !!ZChannelConnector methodsFor: 'dropping/grabbing' stamp: 'NM 9/10/2018 16:10'!justDroppedInto: aMorph event: anEvent	(aMorph isKindOf: ZNode) 		ifTrue: [channel receiver: aMorph]		ifFalse: [self delete]! !!ZChannelConnector methodsFor: 'accessing' stamp: 'NM 9/5/2018 11:43'!channel: aChannel	channel := aChannel.! !Morph subclass: #ZEditor	instanceVariableNames: 'events'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZEditor methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 17:47'!duplicate	^ super duplicate initializeDuplicate! !!ZEditor methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 16:14'!events	^ events! !!ZEditor methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 16:05'!initialize	super initialize.		events := ZEventEmitter new.! !!ZEditor methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 17:47'!initializeDuplicate	events := ZEventEmitter new.! !!ZEditor methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 16:05'!serialize	^ nil! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ZEditor class	instanceVariableNames: ''!!ZEditor class methodsFor: 'as yet unclassified' stamp: 'NM 9/24/2018 14:56'!for: aMessage		(aMessage isKindOf: Association) ifTrue: [		^ ZNamedEditor new			name: aMessage key;			value: aMessage value].			(aMessage isKindOf: Array) ifTrue: [		^ ZAddressEditor new			address: aMessage].			(aMessage isKindOf: Set) ifTrue: [		^ ZContainerEditor new			inhabitants: aMessage].			(aMessage isKindOf: String) ifTrue: [		 ^ ZText new			contents: aMessage].			self halt.! !ZEditor subclass: #ZAddressEditor	instanceVariableNames: 'names'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZAddressEditor methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 16:28'!addAndEditNameAfter: name	self addName: ''.	name passKeyboardFocusTo: (names last).	names last ignoreNextStroke.! !!ZAddressEditor methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 16:38'!addName: aString	| name |		name := ZText new contents: aString.	name events when: #pressed do: [:evt| self pressed: evt on: name].	name events when: #changed do: [:before| self namesChanged].		names isEmpty ifFalse: [		self addMorphBack: (ZText new			lock; 			color: (Color white mixed: 0.5 with: self color); 			contents: '.')].			names add: name.	self addMorphBack: name.		self namesChanged.! !!ZAddressEditor methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 16:28'!address: anArray	self removeAllMorphs.	names removeAll.		anArray do: [:e| self addName: e].! !!ZAddressEditor methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 16:29'!editNameAfter: name	| other |	other := names after: name.	name passKeyboardFocusTo: other.	other ignoreNextStroke.! !!ZAddressEditor methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 16:29'!editNameBefore: name	 | other |	other := names before: name.	name passKeyboardFocusTo: other.	other selectFrom: other text size + 1 to: other text size + 1.	other ignoreNextStroke.! !!ZAddressEditor methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 16:36'!initialize	super initialize.		names := OrderedCollection new.		self color: Color gray.	self layoutPolicy: TableLayout new;		listDirection: #leftToRight;		wrapCentering: #topLeft;		wrapDirection: #topToBottom;		vResizing: #shrinkWrap;		hResizing: #shrinkWrap;		layoutInset: 2;		cellInset: 0@5.	self addName: ''! !!ZAddressEditor methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 17:25'!namesChanged	self width: (submorphs collect: [:n| n width]) sum + 4.	events fire: #changed.! !!ZAddressEditor methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 16:34'!pressed: evt on: name	(((evt keyValue = 29 		and: [submorphs last = name]) 		and: [name value isEmpty not]) 		and: [name editor startIndex = (name text size + 1)]) 			ifTrue: [self addAndEditNameAfter: name].	(((#(8 28) includes: evt keyValue) 		and: [submorphs first ~= name]) 		and: [name editor startIndex = 1])			ifTrue: [self editNameBefore: name].	(((#(29) includes: evt keyValue) 		and: [submorphs last ~= name]) 		and: [name editor startIndex = (name text size + 1)]) 			ifTrue: [self editNameAfter: name].		((evt keyValue = 8 and: [name value isEmpty]) 		and: [submorphs size > 1]) 			ifTrue: [self removeName: name].! !!ZAddressEditor methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 16:31'!removeName: name	names remove: name.	submorphs first = name ifFalse: [(submorphs before: name) delete].	name delete.	self namesChanged.! !!ZAddressEditor methodsFor: 'as yet unclassified' stamp: 'NM 9/24/2018 14:59'!serialize	^ self value! !!ZAddressEditor methodsFor: 'as yet unclassified' stamp: 'NM 9/24/2018 14:59'!value	^ (names collect: [:n| n value]) asArray! !ZEditor subclass: #ZContainerEditor	instanceVariableNames: 'row'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZContainerEditor methodsFor: 'as yet unclassified' stamp: 'NM 9/24/2018 14:36'!addInhabitant: aMessage	| inhabitant |		submorphs isEmpty ifTrue: [row := self position extent: 5].		inhabitant := ZEditor for: aMessage.		self addMorph: inhabitant.	inhabitant position: row topRight + (0@5).		(self bounds containsPoint: inhabitant topRight) ifFalse: [		inhabitant position: row bottomLeft + (5@0).		row := row top: inhabitant bounds top].		row := row right: inhabitant bounds right + 5.	row := row bottom: (inhabitant bounds bottom + 5 max: row bottom).		self bounds: (self bounds bottom: row bottom).! !!ZContainerEditor methodsFor: 'as yet unclassified' stamp: 'NM 9/24/2018 14:39'!inhabitants: aSet	aSet do: [:i| self addInhabitant: i].	self bounds: (self bounds right: ((submorphs collect: [:m| m bounds right + 5]) max)).! !!ZContainerEditor methodsFor: 'as yet unclassified' stamp: 'NM 9/24/2018 15:50'!initialize	super initialize.		self extent: 300@100.	self color: (Color gray alpha: 0.2).	self clipSubmorphs: true.! !!ZContainerEditor methodsFor: 'as yet unclassified' stamp: 'NM 9/24/2018 14:50'!serialize	^ (submorphs collect: [:s| s serialize]) asSet.! !Object subclass: #ZEventEmitter	instanceVariableNames: 'observers'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZEventEmitter methodsFor: 'as yet unclassified' stamp: 'NM 9/20/2018 09:16'!clear	observers removeAll.! !!ZEventEmitter methodsFor: 'as yet unclassified' stamp: 'NM 9/19/2018 23:26'!fire: event	observers do: [:o| (o key = event) ifTrue: [o value value]]! !!ZEventEmitter methodsFor: 'as yet unclassified' stamp: 'NM 9/19/2018 23:26'!fire: event with: anArgument	observers do: [:o| (o key = event) ifTrue: [o value value: anArgument]]! !!ZEventEmitter methodsFor: 'as yet unclassified' stamp: 'NM 9/19/2018 23:26'!initialize	super initialize.		observers := Set new.! !!ZEventEmitter methodsFor: 'as yet unclassified' stamp: 'NM 9/19/2018 23:27'!when: event do: aBlock	observers add: event -> aBlock.! !ZEditor subclass: #ZNamedEditor	instanceVariableNames: 'name value'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZNamedEditor methodsFor: 'as yet unclassified' stamp: 'NM 9/24/2018 14:53'!extent: aPoint	value extent: aPoint - (0@name height).	Transcript show: value extent; cr.	super extent: (value width max: name width)@(value height + name height).	value position: name bottomLeft.! !!ZNamedEditor methodsFor: 'as yet unclassified' stamp: 'NM 9/24/2018 12:04'!initialize	super initialize.		self color: (Color gray alpha: 0.5).! !!ZNamedEditor methodsFor: 'as yet unclassified' stamp: 'NM 9/24/2018 11:49'!name: aString	name := ZText new contents: aString.	self addMorphBack: name.! !!ZNamedEditor methodsFor: 'as yet unclassified' stamp: 'NM 9/24/2018 11:50'!serialize	^ name value -> value serialize! !!ZNamedEditor methodsFor: 'as yet unclassified' stamp: 'NM 9/24/2018 14:15'!value: aNode	value := ZEditor for: aNode.	value events when: #changed do: [		self extent: (value width max: name width)@(value height + name height)].	self addMorphFront: value.	self extent: (value width max: name width)@(value height + name height).! !Morph subclass: #ZNode	instanceVariableNames: 'flashing'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZNode methodsFor: 'as yet unclassified' stamp: 'NM 9/11/2018 11:19'!delete	submorphs do: [:s | s delete].	super delete.! !!ZNode methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 14:52'!drawOn: aCanvas	aCanvas fillOval: self bounds color: (flashing 		ifTrue: [(self color mixed: 0.5 with: Color white) alpha: 0.2]		ifFalse: [self color alpha: 0.1]).			aCanvas frameOval: self bounds width: 3 color: self color.! !!ZNode methodsFor: 'as yet unclassified' stamp: 'NM 9/12/2018 11:58'!duplicate	^ super duplicate initializeDuplicate.! !!ZNode methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 14:51'!flash	flashing := true.	self invalidRect: self bounds.		([		flashing := false.		self invalidRect: self bounds.	] future: 100) value.! !!ZNode methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 14:47'!initialize	super initialize.		self extent: 70@70.	self color: self pickAColor.		flashing := false.! !!ZNode methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 14:48'!initializeDuplicate	self color: self pickAColor.	self submorphs do: [:m| (m isKindOf: ZChannelConnector) ifTrue: [m delete]].! !!ZNode methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 14:48'!pickAColor	 ^ ((Color wheel: 24) atRandom) mixed: 0.7 with: Color white! !!ZNode methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 15:43'!receive: aSignal	self flash.! !!ZNode methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 14:53'!wantsDroppedMorph: aMorph event: evt	^ aMorph isKindOf: ZChannelConnector! !ZNode subclass: #ZMeshNode	instanceVariableNames: 'address channels received'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZMeshNode methodsFor: 'signalling' stamp: 'NM 9/21/2018 15:51'!address	^ address value! !!ZMeshNode methodsFor: 'signalling' stamp: 'NM 9/21/2018 16:39'!address: anArray	address ifNotNil: [address delete].	address := ZAddressEditor new 		address: anArray; 		color: (self color mixed: 0.5 with: Color black).	address events when: #changed do: [self addressChanged].	self addMorph: address.	self updateLayout.! !!ZMeshNode methodsFor: 'signalling' stamp: 'NM 9/21/2018 15:51'!addressChanged	self updateLayout.! !!ZMeshNode methodsFor: 'signalling' stamp: 'NM 9/21/2018 15:17'!alreadyReceived: aSignal	ZSignal find: #id in: aSignal		ifFound: [:id|			(received includes: id) 				ifTrue: [^ true].			received add: id].			^ false! !!ZMeshNode methodsFor: 'signalling' stamp: 'NM 9/5/2018 13:20'!close: aChannel	channels remove: aChannel ifAbsent: [].	aChannel owner ifNotNil: [aChannel delete].! !!ZMeshNode methodsFor: 'signalling' stamp: 'NM 9/21/2018 15:22'!isForMe: aMessage	ZSignal find: #to in: aMessage		ifFound: [:to| ^ self isMe: to]		ifNone: [^ false].! !!ZMeshNode methodsFor: 'signalling' stamp: 'NM 9/24/2018 15:31'!isMe: toAddress	^ address value = toAddress! !!ZMeshNode methodsFor: 'signalling' stamp: 'NM 9/10/2018 14:05'!isValid: aSignal	^ (aSignal isKindOf: Collection)		and: [aSignal contains: [:e| (e isKindOf: Association) and: [e key asLowercase = #id]]]		and: [aSignal contains: [:e| (e isKindOf: Association) and: [e key asLowercase = #message]]].! !!ZMeshNode methodsFor: 'signalling' stamp: 'NM 9/21/2018 15:54'!moveToContainer: itsAddress	address ifNotNil: [self address: itsAddress , {address value last}]! !!ZMeshNode methodsFor: 'signalling' stamp: 'NM 9/21/2018 15:07'!openChannel	^ channels add: (ZChannel new sender: self)! !!ZMeshNode methodsFor: 'signalling' stamp: 'NM 9/21/2018 15:18'!receive: aSignal	(self isValid: aSignal) ifFalse: [^ nil].	(self alreadyReceived: aSignal) ifTrue: [^ nil].	channels do: [:c| c transmit: aSignal].		ZSignal find: #message in: aSignal ifFound: [:message|		(self isForMe: message) ifTrue: [			super receive: aSignal.			self receiveMessage: message]]! !!ZMeshNode methodsFor: 'signalling' stamp: 'NM 9/21/2018 15:18'!receiveMessage: message	ZSignal find: #please in: message ifFound: [:content| 		self receiveMessageContent: content.				ZSignal find: #from in: message ifFound: [:from|			self receiveMessageContent: content from: from]].! !!ZMeshNode methodsFor: 'signalling' stamp: 'NM 9/24/2018 15:00'!receiveMessageContent: content	ZSignal find: #moveTo in: content ifFound: [:containerAddress|		self moveToContainer: containerAddress].! !!ZMeshNode methodsFor: 'signalling' stamp: 'NM 9/21/2018 15:15'!receiveMessageContent: content from: sender	(content = #serialize) ifTrue: [		self serialize then: [:serialized| self sendContent: serialized to: sender]].! !!ZMeshNode methodsFor: 'signalling' stamp: 'NM 9/10/2018 14:33'!serialize	^ Promise unit: nil! !!ZMeshNode methodsFor: 'signalling' stamp: 'NM 9/21/2018 17:25'!updateLayout	address ifNotNil: [		address center: self topCenter - (0@(address height/2 + 5))]! !!ZMeshNode methodsFor: 'submorphs-add/remove' stamp: 'NM 9/11/2018 11:19'!delete	channels do: [:c | c connector delete].	super delete.! !!ZMeshNode methodsFor: 'submorphs-add/remove' stamp: 'NM 9/21/2018 15:59'!extent: aPoint	super extent: aPoint.	self updateLayout.! !!ZMeshNode methodsFor: 'submorphs-add/remove' stamp: 'NM 9/12/2018 14:58'!initializeDuplicate	super initializeDuplicate.	channels removeAll.! !!ZMeshNode methodsFor: 'submorphs-add/remove' stamp: 'NM 9/10/2018 15:40'!send: message	self receive: {		#ID -> ZMeshNode nextId.		#message -> message}.! !!ZMeshNode methodsFor: 'submorphs-add/remove' stamp: 'NM 9/11/2018 11:41'!sendContent: content	self sendContent: content to: nil.! !!ZMeshNode methodsFor: 'submorphs-add/remove' stamp: 'NM 9/21/2018 15:57'!sendContent: content to: receiver	self sendContent: content to: receiver from: address value.! !!ZMeshNode methodsFor: 'submorphs-add/remove' stamp: 'NM 9/24/2018 15:44'!sendContent: content to: receiver from: sender	self send: ([:message|			receiver ifNotNil: [message add: #to -> receiver].			sender ifNotNil: [message add: #from -> sender].			message add: #please -> content.			message asSet.		] value: Set new).! !!ZMeshNode methodsFor: 'submorphs-add/remove' stamp: 'NM 9/21/2018 15:58'!sendContent: content to: receiver withReply: reaction	| reply |	reply := ZDynamicNode new 		address: address , {#reply . (1 to: 10000) atRandom};		reaction: [:message|			reaction value: message.			reply delete].			self owner ifNotNil: [self addMorph: (reply position: self position - (self width * 2@0))].			self openChannel receiver: reply.	self sendContent: content to: receiver from: reply address value.! !!ZMeshNode methodsFor: 'initialization' stamp: 'NM 9/21/2018 15:42'!initialize	super initialize.		channels := Set new.	received := Set new.! !!ZMeshNode methodsFor: 'dropping/grabbing' stamp: 'NM 9/5/2018 11:48'!handlesMouseDown: evt	^ evt shiftPressed.! !!ZMeshNode methodsFor: 'dropping/grabbing' stamp: 'NM 9/5/2018 11:48'!mouseDown: evt	(evt shiftPressed) ifFalse: [^ nil].		evt hand grabMorph: (self openChannel connector 		center: evt position).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ZMeshNode class	instanceVariableNames: ''!!ZMeshNode class methodsFor: 'as yet unclassified' stamp: 'NM 9/5/2018 20:54'!nextId	^ (DateAndTime now asUnixTime * 1000) + (1 to: 1000) atRandom! !ZMeshNode subclass: #ZContainerNode	instanceVariableNames: 'inhabitants'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZContainerNode methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 15:37'!addInhabitant: theirAddress	inhabitants add: address , {theirAddress}.	self sendContent: {#moveTo -> address} asSet to: theirAddress.! !!ZContainerNode methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 15:35'!address: anArray	super address: anArray.		inhabitants do: [:inhabitant|		self sendContent: {#moveTo -> address} asSet to: inhabitant].! !!ZContainerNode methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 15:27'!drawOn: aCanvas	super drawOn: aCanvas.		1 to: inhabitants size do: [:i| 		aCanvas frameOval: (Rectangle 				center: (self leftCenter + ((i*15)@0)) 				extent: 10) 			width: 2 			color: Color white]! !!ZContainerNode methodsFor: 'as yet unclassified' stamp: 'NM 9/6/2018 19:06'!initialize	super initialize.		inhabitants := Set new.! !!ZContainerNode methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 15:28'!receiveMessageContent: content	super receiveMessageContent: content.	self find: #addInhabitant in: content ifFound: [:a|		self addInhabitant: a].		self find: #removeInhabitant in: content ifFound: [:a|		self removeInhabitant: a].! !!ZContainerNode methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 15:36'!receiveMessageContent: content from: sender	super receiveMessageContent: content from: sender.	(content = #sendYourInhabitants) ifTrue: [		self sendContent: {#knowMyInhabitants -> inhabitants} asSet to: sender].! !!ZContainerNode methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 15:36'!removeInhabitant: theirAddress	(inhabitants includes: theirAddress) ifTrue: [		inhabitants remove: theirAddress.		self sendContent: {#moveTo -> {}} asSet to: theirAddress].! !!ZContainerNode methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 14:41'!serialize	^ self serializeInhabitants: Promise new.! !!ZContainerNode methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 15:39'!serializeInhabitants: aPromise	| resolved |	resolved := Set new.		inhabitants do: [:inhabitant|		self sendContent: #serialize to: inhabitant withReply: [:message|			self find: #content in: message ifFound: [:content|				resolved add: inhabitant -> content.				(resolved size = inhabitants size) ifTrue: [					aPromise resolveWith: resolved]]]].		^ aPromise! !ZMeshNode subclass: #ZDynamicNode	instanceVariableNames: 'reaction'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZDynamicNode methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 16:16'!reaction: aBlock	reaction := aBlock.! !!ZDynamicNode methodsFor: 'as yet unclassified' stamp: 'NM 9/12/2018 09:38'!receiveMessage: message	super receiveMessage: message.		reaction ifNotNil: [reaction value: message].! !ZMeshNode subclass: #ZEchoNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZEchoNode methodsFor: 'as yet unclassified' stamp: 'NM 9/12/2018 09:19'!drawOn: aCanvas	| inside |	super drawOn: aCanvas.		inside := Rectangle center: self center extent: self width / 4.	aCanvas line: inside topRight to: inside bottomRight width: 2 color: self color.	aCanvas line: inside topLeft to: inside rightCenter width: 2 color: self color.	aCanvas line: inside bottomLeft to: inside rightCenter width: 2 color: self color.! !!ZEchoNode methodsFor: 'as yet unclassified' stamp: 'NM 9/11/2018 16:04'!receiveMessageContent: content from: sender	super receiveMessageContent: content from: sender.		self sendContent: content , ' echo' to: sender.! !ZMeshNode subclass: #ZNumbersNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZNumbersNode methodsFor: 'as yet unclassified' stamp: 'NM 9/24/2018 15:28'!initialize	super initialize.		self address: {#numbers}! !!ZNumbersNode methodsFor: 'as yet unclassified' stamp: 'NM 9/24/2018 15:31'!isMe: toAddress	^ address value first = toAddress first! !!ZNumbersNode methodsFor: 'as yet unclassified' stamp: 'NM 9/24/2018 15:50'!receiveMessage: message	super receiveMessage: message.		self 		sendContent:			{#knowTheSumIs -> {#numbers .				((ZSignal find: #to in: message) last				+ (ZSignal find: #add in: (ZSignal find: #please in: message)) last) asString}} asSet		to: (ZSignal find: #from in: message)		from: nil.! !ZMeshNode subclass: #ZPortal	instanceVariableNames: 'body'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 17:37'!address: anArray	super address: anArray.	address color: self color.! !!ZPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 17:39'!buildBody	^ Morph new		color: Color black! !!ZPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 17:39'!drawIconOn: aCanvas in: aRect	aCanvas fillRectangle: aRect color: Color black.! !!ZPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 17:34'!drawOn: aCanvas	aCanvas fillRectangle: self bounds color: (flashing ifTrue: [Color white] ifFalse: [self color]).	self drawIconOn: aCanvas in: (self topLeft + (ZPortal marginSize@ZPortal marginSize) extent: ZPortal headSize).! !!ZPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 17:35'!initialize	super initialize.		body := self buildBody.	self addMorph: body.		self extent: 200@100.! !!ZPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 17:37'!pickAColor	^ Color gray! !!ZPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 17:37'!updateLayout	super updateLayout.		address ifNotNil: [		address position: self position + ((ZPortal marginSize * 2 + ZPortal headSize)@0)].		body ifNotNil: [		body extent: self extent - ((ZPortal marginSize * 2)@(ZPortal marginSize * 3 + ZPortal headSize)).		body position: self position + (ZPortal marginSize@(ZPortal headSize + (ZPortal marginSize * 2)))].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ZPortal class	instanceVariableNames: ''!!ZPortal class methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 17:31'!headSize	^ 20! !!ZPortal class methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 17:31'!marginSize	^ 5! !ZPortal subclass: #ZPointedPortal	instanceVariableNames: 'target'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZPointedPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 17:54'!acceptDroppingMorph: aMorph event: evt	(aMorph isKindOf: ZAddressEditor)		ifTrue: [self pointAt: aMorph value. target color: aMorph color]		ifFalse: [super acceptDroppingMorph: aMorph event: evt]! !!ZPointedPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 17:58'!pointAt: anAddress	target ifNotNil: [target delete].	target := ZAddressEditor new address: anAddress.	self addMorph: target.	self updateLayout.! !!ZPointedPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 17:59'!sendContent: content	self sendContent: content to: target value.! !!ZPointedPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/24/2018 11:43'!updateLayout	super updateLayout.		target ifNotNil: [		target position: self bottomLeft 			- ((0 - ZPortal marginSize)@(ZPortal marginSize + target height))..		body height: body height - (target height + ZPortal marginSize)]! !!ZPointedPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 17:52'!wantsDroppedMorph: aMorph event: evt	^ (super wantsDroppedMorph: aMorph event: evt)		or: [aMorph isKindOf: ZAddressEditor]! !ZPointedPortal subclass: #ZContainerPortal	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZContainerPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 14:13'!acceptDroppingMorph: aMorph event: evt	((aMorph isKindOf: ZAddress) and: [body bounds containsPoint: evt position]) 		ifTrue: [			self addInhabitant: aMorph.			self sendContent: {#add -> aMorph value}]		ifFalse: [			super acceptDroppingMorph: aMorph event: evt]! !!ZContainerPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 14:14'!addInhabitant: anAddress	(body submorphs contains: [:s| (pointedAt value , '/' , s value) = anAddress value]) ifTrue: [		^ nil].		body addMorph: anAddress.	anAddress observe: {		#removed -> [			self removeInhabitant: anAddress].		#changed -> [:before| 			self removeInhabitant: (ZAddress new contents: before).			self sendContent: {#add -> anAddress value}]}.! !!ZContainerPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/6/2018 21:19'!drawIconOn: aCanvas in: aRect	aCanvas frameOval: aRect width: 3 color: Color black.	aCanvas frameOval: (Rectangle center: aRect center - (aRect width / 6@0) extent: 6) width: 2 color: Color black.	aCanvas frameOval: (Rectangle center: aRect center + (aRect width / 6@0) extent: 6) width: 2 color: Color black.! !!ZContainerPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/18/2018 14:19'!pointAtAddress: anAddress	super pointAtAddress: anAddress.		self sendContent: 'inhabitants?'.! !!ZContainerPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/6/2018 20:59'!pointAway	super pointAway.		body removeAllMorphs.! !!ZContainerPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 14:39'!receiveMessageContent: content	super receiveMessageContent: content.	self find: #inhabitants in: content ifFound: [:inhabitants|		body removeAllMorphs.		inhabitants do: [:inhabitant|			self addInhabitant: (ZAddress new				contents: inhabitant;				position: body position + ((body submorphs size * 50 + 10)@10))]].! !!ZContainerPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 14:14'!removeInhabitant: anAddress	anAddress clearObservers.	self sendContent: {#remove -> anAddress value}.! !ZPortal subclass: #ZSenderPortal	instanceVariableNames: 'contexts'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZSenderPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 11:49'!acceptDroppingMorph: aMorph event: evt	((aMorph isKindOf: ZAddress) and: [body bounds containsPoint: evt position]) 		ifTrue: [			self serializeAndSend: aMorph]		ifFalse: [			super acceptDroppingMorph: aMorph event: evt]! !!ZSenderPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 11:45'!drawIconOn: aCanvas in: aRect	aCanvas frameOval: (Rectangle center: aRect center + (-5@0) extent: 6) width: 2 color: Color black.	aCanvas clipBy: (aRect left: aRect center x - 2) during: [:c|		c frameOval: (Rectangle center: aRect center + (-5@0) extent: 16) width: 2 color: Color black.		c frameOval: (Rectangle center: aRect center + (-5@0) extent: 26) width: 2 color: Color black].! !!ZSenderPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 12:12'!initialize	super initialize.		contexts := Dictionary new.! !!ZSenderPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 14:21'!isMe: aString	^ (super isMe: aString)		or: [address value , '/send' = aString]! !!ZSenderPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 14:36'!receiveMessage: message	super receiveMessage: message.		self find: #to in: message ifFound: [:to|		(address value , '/send' = to) ifTrue: [			self find: #content in: message ifFound: [:content|				self send: content]]]! !!ZSenderPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 14:17'!serializeAndSend: anAddress	self sendContent: #asMessage to: anAddress value from: address value , '/send'.! !Object subclass: #ZSignal	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ZSignal class	instanceVariableNames: ''!!ZSignal class methodsFor: 'as yet unclassified' stamp: 'NM 9/24/2018 15:35'!find: key in: aCollection	^ self find: key in: aCollection ifFound: [:found|found] ifNone: []! !!ZSignal class methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 15:01'!find: key in: aCollection ifFound: foundBlock	^ self find: key in: aCollection ifFound: foundBlock ifNone: []! !!ZSignal class methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 15:01'!find: key in: aCollection ifFound: foundBlock ifNone: noneBlock	(aCollection isKindOf: Collection) ifFalse: [^ noneBlock value].		aCollection detect: [:e| 			(e isKindOf: Association) 			and: [e key asString asLowercase = key asString asLowercase]		]	ifFound: [:found| ^ foundBlock value: found value]	ifNone: noneBlock.		^ nil.! !TextMorph subclass: #ZText	instanceVariableNames: 'events ignoreNextStroke'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZText methodsFor: 'as yet unclassified' stamp: 'NM 9/19/2018 23:26'!delete	super delete.	events fire: #removed.! !!ZText methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 17:46'!duplicate	^ super duplicate initializeDuplicate! !!ZText methodsFor: 'as yet unclassified' stamp: 'NM 9/19/2018 23:27'!events	^ events! !!ZText methodsFor: 'as yet unclassified' stamp: 'NM 9/19/2018 23:18'!ignoreNextStroke	ignoreNextStroke := true.! !!ZText methodsFor: 'as yet unclassified' stamp: 'NM 9/19/2018 23:29'!initialize	super initialize.		ignoreNextStroke := false.	events := ZEventEmitter new.		self color: Color white.! !!ZText methodsFor: 'as yet unclassified' stamp: 'NM 9/21/2018 17:46'!initializeDuplicate	events := ZEventEmitter new.! !!ZText methodsFor: 'as yet unclassified' stamp: 'NM 9/19/2018 23:30'!justGrabbedFrom: formerOwner	super justGrabbedFrom: formerOwner.	events fire: #removed.! !!ZText methodsFor: 'as yet unclassified' stamp: 'NM 9/19/2018 23:30'!keyDown: evt	events fire: #pressed with: evt.	super keyDown: evt.! !!ZText methodsFor: 'as yet unclassified' stamp: 'NM 9/19/2018 23:29'!keyStroke: evt	| before |	ignoreNextStroke ifTrue: [		ignoreNextStroke := false.		^ nil].		before := self value.	super keyStroke: evt.	before = self value ifFalse: [events fire: #changed with: before].! !!ZText methodsFor: 'as yet unclassified' stamp: 'NM 9/19/2018 23:12'!keyUp: evt	evt wasIgnored ifTrue: [^ nil].	super keyUp: evt.! !!ZText methodsFor: 'as yet unclassified' stamp: 'NM 9/24/2018 14:57'!serialize	^ self value.! !!ZText methodsFor: 'as yet unclassified' stamp: 'NM 9/19/2018 21:29'!value	^ self contents asString.! !ZMeshNode subclass: #ZTextNode	instanceVariableNames: 'value'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZTextNode methodsFor: 'as yet unclassified' stamp: 'NM 9/12/2018 11:36'!drawOn: aCanvas	super drawOn: aCanvas.	value isNil		ifTrue: [aCanvas drawString: #T at: self leftCenter - (-10@10) font: nil color: self color]		ifFalse: [aCanvas drawString: value at: self leftCenter - (-10@10) font: nil color: Color white].! !!ZTextNode methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 14:15'!receiveMessageContent: content	super receiveMessageContent: content.	self find: #set in: content ifFound: [:s|		self setText: s]! !!ZTextNode methodsFor: 'as yet unclassified' stamp: 'NM 9/10/2018 14:34'!serialize	^ Promise unit: value! !!ZTextNode methodsFor: 'as yet unclassified' stamp: 'NM 9/5/2018 20:05'!setText: aString	value := aString.! !ZPointedPortal subclass: #ZTextPortal	instanceVariableNames: 'text'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZTextPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/5/2018 20:34'!buildBody		text := TextMorph new		contents: 'text';		color: Color white;		on: #keyUp send: #textChanged to: self;		yourself.			^ super buildBody			addMorph: text! !!ZTextPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/5/2018 21:08'!drawIconOn: aCanvas in: aRect	| r |	r := aRect insetBy: 4.	aCanvas line: r topLeft to: r topRight width: 4 color: Color black.	aCanvas line: r bottomCenter to: r topCenter width: 4 color: Color black.! !!ZTextPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/5/2018 20:44'!extent: aPoint	super extent: aPoint. 	self positionText.! !!ZTextPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/5/2018 20:34'!initialize	super initialize.			self positionText.! !!ZTextPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/5/2018 19:42'!positionText	body ifNotNil: [text position: body position + (body extent / 2) - (text extent / 2)].! !!ZTextPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/12/2018 11:48'!setText: aString	self sendContent: {#set -> aString}.	text contents: aString.! !!ZTextPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/5/2018 20:56'!textChanged	self setText: text contents asString.	self positionText.! !ZPortal subclass: #ZTransceiverPortal	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZTransceiverPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/24/2018 14:50'!acceptDroppingMorph: aMorph event: evt	(aMorph isKindOf: ZEditor) 		ifTrue: [			self send: aMorph serialize]		ifFalse: [			super acceptDroppingMorph: aMorph event: evt]! !!ZTransceiverPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/24/2018 15:14'!extent: aPoint	super extent: aPoint.	body submorphs do: [:m| (m left > (body left + 5)) ifTrue: [m right: body right - 5]].! !!ZTransceiverPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/24/2018 15:12'!receiveMessage: message	super receiveMessage: message.		body addMorph: ((ZEditor for: message)		top: ((body submorphs collect: [:m|m bottom]) , {body top}) max + 5;		left: body left + 5).! !!ZTransceiverPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/24/2018 15:11'!send: aMessage	super send: aMessage.	body addMorph: ((ZEditor for: aMessage)		top: ((body submorphs collect: [:m|m bottom]) , {body top}) max + 5;		right: body right - 5).! !!ZTransceiverPortal methodsFor: 'as yet unclassified' stamp: 'NM 9/20/2018 16:11'!wantsDroppedMorph: aMorph event: evt	^ (super wantsDroppedMorph: aMorph event: evt)			or: [aMorph isKindOf: ZEditor].! !ZNode subclass: #ZTranscriptNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZTranscriptNode methodsFor: 'as yet unclassified' stamp: 'NM 9/12/2018 09:17'!drawOn: aCanvas	super drawOn: aCanvas.	aCanvas fillRectangle: (self bounds insetBy: 25) color: self color.! !!ZTranscriptNode methodsFor: 'as yet unclassified' stamp: 'NM 9/11/2018 11:30'!receive: aSignal	super receive: aSignal.		Transcript show: aSignal; cr.! !