Morph subclass: #Scope	instanceVariableNames: 'attached connector link body'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!Scope methodsFor: 'as yet unclassified' stamp: 'NM 8/30/2018 08:46'!attachTo: aZell	self detach.	self buildBody.		self color: aZell color.	self extent: self width@(22 + body height).		link := ScopeLink new between: self and: aZell.		self addMorphFront: body.		attached := aZell attach: self.! !!Scope methodsFor: 'as yet unclassified' stamp: 'NM 8/30/2018 08:51'!buildBody	body := Morph new		color: Color black;		position: self position + (2@20);		extent: self width@80;		clipSubmorphs: true;		yourself.! !!Scope methodsFor: 'as yet unclassified' stamp: 'NM 8/30/2018 08:43'!detach	self color: Color white.	self extent: self width@20.		attached ifNotNil: [attached detach: self].	attached := nil.		link ifNotNil: [link delete].	link := nil.		body ifNotNil: [body delete].	body := nil.! !!Scope methodsFor: 'as yet unclassified' stamp: 'NM 8/28/2018 13:53'!drawIconOn: aCanvas in: aRect	aCanvas fillRectangle: aRect color: Color black.! !!Scope methodsFor: 'submorphs-add/remove' stamp: 'NM 8/28/2018 16:14'!delete	self detach.	super delete.! !!Scope methodsFor: 'error handling' stamp: 'NM 8/29/2018 16:30'!doesNotUnderstand: aMessage	"That's ok. Just ignore."! !!Scope methodsFor: 'drawing' stamp: 'NM 8/29/2018 16:09'!drawOn: aCanvas	super drawOn: aCanvas.	self drawIconOn: aCanvas in: (self topLeft + (5@5) extent: 10@10).! !!Scope methodsFor: 'geometry' stamp: 'NM 8/28/2018 15:29'!extent: aPoint	super extent: aPoint. 	body ifNotNil: [body extent: aPoint - (4@22)].! !!Scope methodsFor: 'initialization' stamp: 'NM 8/30/2018 08:42'!initialize	super initialize.	self color: Color white.	self extent: 100@20.		connector := ScopeConnector new of: self.! !Scope subclass: #ContainerScope	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ContainerScope methodsFor: 'as yet unclassified' stamp: 'NM 8/28/2018 17:58'!acceptDroppingMorph: aMorph event: evt	self add: aMorph.	aMorph delete.! !!ContainerScope methodsFor: 'as yet unclassified' stamp: 'NM 8/28/2018 17:58'!add: aZell	attached ifNotNil: [attached receive: {#body -> {#add -> (ZellSerDes new serialize: aZell)}}].! !!ContainerScope methodsFor: 'as yet unclassified' stamp: 'NM 8/29/2018 12:05'!detach	body ifNotNil: [body submorphs do: [:m | m delete]].	super detach.! !!ContainerScope methodsFor: 'as yet unclassified' stamp: 'NM 8/28/2018 15:51'!drawIconOn: aCanvas in: aRect	aCanvas frameOval: (Rectangle center: aRect center extent: 12) width: 1 color: Color black.	aCanvas frameOval: (Rectangle center: aRect center - (2@0) extent: 2) width: 2 color: Color black.	aCanvas frameOval: (Rectangle center: aRect center + (2@0) extent: 2) width: 2 color: Color black.! !!ContainerScope methodsFor: 'as yet unclassified' stamp: 'NM 8/28/2018 16:12'!inhabitantAdded: aZell	| inhabitant |	inhabitant := aZell.	inhabitant position: body position + ((body submorphs size * 60 + 10)@10).	body addMorph: inhabitant.! !!ContainerScope methodsFor: 'as yet unclassified' stamp: 'NM 8/29/2018 11:42'!wantsDroppedMorph: aMorph event: evt	^ attached notNil and: [aMorph isKindOf: Zell].! !Scope subclass: #InboxScope	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!InboxScope methodsFor: 'as yet unclassified' stamp: 'NM 8/28/2018 17:17'!acceptDroppingMorph: aMorph event: evt	body addMorph: aMorph.	attached ifNotNil: [attached receive: (ZellSerDes new serialize: aMorph)].! !!InboxScope methodsFor: 'as yet unclassified' stamp: 'NM 8/28/2018 15:22'!drawIconOn: aCanvas in: aRect	aCanvas line: aRect topLeft to: aRect center width: 2 color: Color black.	aCanvas line: aRect bottomLeft to: aRect center width: 2 color: Color black.	aCanvas frameOval: (Rectangle center: aRect center + (3@0) extent: 6) width: 2 color: Color black.! !!InboxScope methodsFor: 'as yet unclassified' stamp: 'NM 8/29/2018 11:42'!wantsDroppedMorph: aMorph event: evt	^ attached notNil and: [aMorph isKindOf: Zell].! !Scope subclass: #ListenerScope	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ListenerScope methodsFor: 'as yet unclassified' stamp: 'NM 8/28/2018 15:13'!buildBody	super buildBody.	body 		layoutPolicy: TableLayout new;		listDirection: #topToBottom;		cellPositioning: #topLeft;		layoutInset: 5; cellInset: 10;		clipSubmorphs: true.! !!ListenerScope methodsFor: 'as yet unclassified' stamp: 'NM 8/28/2018 15:31'!drawIconOn: aCanvas in: aRect	aCanvas frameOval: (Rectangle center: aRect center extent: 12) width: 1 color: Color black.	aCanvas frameOval: (Rectangle center: aRect center extent: 6) width: 2 color: Color black.! !!ListenerScope methodsFor: 'as yet unclassified' stamp: 'NM 8/28/2018 15:17'!received: aSignal	body addMorph: (ZellSerDes new inflate: aSignal).	body addMorph: (TextMorph new 		color: Color white;		contents: Time current asString)! !Morph subclass: #ScopeConnector	instanceVariableNames: 'scope link'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ScopeConnector methodsFor: 'as yet unclassified' stamp: 'NM 8/28/2018 13:57'!handlesMouseDown: evt	^ true.! !!ScopeConnector methodsFor: 'as yet unclassified' stamp: 'NM 8/29/2018 15:11'!initialize	super initialize.	self color: Color transparent.	self extent: 20@20.! !!ScopeConnector methodsFor: 'as yet unclassified' stamp: 'NM 8/29/2018 16:17'!justDroppedInto: aMorph event: anEvent	(aMorph isKindOf: Zell) ifTrue: [scope attachTo: aMorph].	self returnToScope.! !!ScopeConnector methodsFor: 'as yet unclassified' stamp: 'NM 8/29/2018 15:37'!mouseDown: evt	scope detach.		self color: Color white.	link := ScopeLink new between: scope and: self.		evt hand grabMorph: self! !!ScopeConnector methodsFor: 'as yet unclassified' stamp: 'NM 8/28/2018 13:59'!of: aScope	scope := aScope.	self returnToScope.! !!ScopeConnector methodsFor: 'as yet unclassified' stamp: 'NM 8/28/2018 14:28'!returnToScope	link ifNotNil: [link delete].	link := nil.		scope addMorph: self.	self color: Color transparent.	self position: scope position.! !Morph subclass: #ScopeLink	instanceVariableNames: 'fromMorph toMorph'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ScopeLink methodsFor: 'as yet unclassified' stamp: 'NM 8/29/2018 16:22'!between: aMorph and: bMorph	fromMorph := aMorph.	toMorph := bMorph.	self color: bMorph color.	ActiveWorld addMorphBack: self.! !!ScopeLink methodsFor: 'as yet unclassified' stamp: 'NM 8/29/2018 16:03'!drawOn: aCanvas	aCanvas 		line: fromMorph center 		to: fromMorph center + ((toMorph center - fromMorph center) normalized * ((fromMorph center dist: toMorph center) - (toMorph width / 2)))		color: self color.! !!ScopeLink methodsFor: 'as yet unclassified' stamp: 'NM 8/29/2018 16:03'!outerBounds	^ super outerBounds outsetBy: 1! !!ScopeLink methodsFor: 'as yet unclassified' stamp: 'NM 8/29/2018 16:11'!rejectsEvent: evt	^ true.! !!ScopeLink methodsFor: 'as yet unclassified' stamp: 'NM 8/30/2018 08:36'!step	self bounds: (Rectangle 		center: (fromMorph center + toMorph center) / 2 		extent: (fromMorph center - toMorph center) abs).			self visible: (fromMorph owner notNil and: [toMorph owner notNil]).! !!ScopeLink methodsFor: 'as yet unclassified' stamp: 'NM 8/28/2018 14:06'!stepTime	^ 10! !Scope subclass: #TextScope	instanceVariableNames: 'text'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!TextScope methodsFor: 'as yet unclassified' stamp: 'NM 8/29/2018 12:06'!attachTo: aZell	super attachTo: aZell.	ActiveHand newKeyboardFocus: text.! !!TextScope methodsFor: 'as yet unclassified' stamp: 'NM 8/30/2018 08:51'!buildBody	super buildBody.	body height: 50.		text := TextMorph new		contents: '';		color: Color white;		height: 100;		on: #keyUp send: #textChanged to: self;		yourself.			body addMorph: text.	self positionText.! !!TextScope methodsFor: 'as yet unclassified' stamp: 'NM 8/30/2018 08:49'!detach	super detach.	text := nil.! !!TextScope methodsFor: 'as yet unclassified' stamp: 'NM 8/28/2018 15:01'!drawIconOn: aCanvas in: aRect	aCanvas line: aRect topLeft to: aRect topRight width: 2 color: Color black.	aCanvas line: aRect bottomCenter to: aRect topCenter width: 2 color: Color black.! !!TextScope methodsFor: 'as yet unclassified' stamp: 'NM 8/30/2018 08:50'!extent: aPoint	super extent: aPoint.	self positionText.! !!TextScope methodsFor: 'as yet unclassified' stamp: 'NM 8/30/2018 08:48'!positionText	text ifNotNil: [text position: body position + (body extent / 2) - (text extent / 2)].! !!TextScope methodsFor: 'as yet unclassified' stamp: 'NM 8/28/2018 14:33'!set: aString	attached ifNotNil: [attached receive: {#body -> {#set -> aString}}]! !!TextScope methodsFor: 'as yet unclassified' stamp: 'NM 8/28/2018 14:53'!textChanged	self set: text contents asString.	self positionText.! !!TextScope methodsFor: 'as yet unclassified' stamp: 'NM 8/28/2018 14:59'!valueChanged: aString	text contents: aString.	self positionText.! !TextScope subclass: #NameScope	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!NameScope methodsFor: 'as yet unclassified' stamp: 'NM 8/28/2018 15:02'!drawIconOn: aCanvas in: aRect	aCanvas line: aRect bottomLeft to: aRect topLeft width: 2 color: Color black.	aCanvas line: aRect topLeft to: aRect bottomRight width: 2 color: Color black.	aCanvas line: aRect bottomRight to: aRect topRight width: 2 color: Color black.! !!NameScope methodsFor: 'as yet unclassified' stamp: 'NM 8/28/2018 15:03'!nameChanged: aString	text contents: aString.	self positionText.! !!NameScope methodsFor: 'as yet unclassified' stamp: 'NM 8/28/2018 14:42'!set: aString	attached ifNotNil: [attached receive: {#body -> {#name -> aString}}]! !!NameScope methodsFor: 'as yet unclassified' stamp: 'NM 8/28/2018 15:03'!valueChanged: aString! !Scope subclass: #TranscriptScope	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!TranscriptScope methodsFor: 'as yet unclassified' stamp: 'NM 8/28/2018 12:45'!received: aSignal	Transcript show: aSignal; cr.! !Morph subclass: #Zell	instanceVariableNames: 'scopes name path flash'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!Zell methodsFor: 'as yet unclassified' stamp: 'NM 8/28/2018 16:22'!attach: aScope	scopes add: aScope.	name ifNotNil: [aScope nameChanged: name].! !!Zell methodsFor: 'as yet unclassified' stamp: 'NM 8/28/2018 12:38'!detach: aScope	scopes remove: aScope ifAbsent: [].! !!Zell methodsFor: 'as yet unclassified' stamp: 'NM 8/28/2018 17:42'!fullName	^ (path ifNil: ['']) , (name ifNil: ['*'])! !!Zell methodsFor: 'as yet unclassified' stamp: 'NM 8/29/2018 12:47'!receive: aSignal	(aSignal isKindOf: Association) ifTrue: [		^ self receive: aSignal value].		(aSignal isKindOf: Collection) ifFalse: [		^ self receiveMy: aSignal].	aSignal detect: [:e | (e isKindOf: Association) and: [e key = #to]]		ifFound: [:to | 			name ifNotNil: [(self fullName endsWith: to value) 				ifTrue: [					^ self receiveMy: aSignal]]]		ifNone: [			^ self receiveMy: aSignal].			self receiveNotMy: aSignal.! !!Zell methodsFor: 'as yet unclassified' stamp: 'NM 8/29/2018 12:35'!receiveMy: aSignal	[flash := true.	self invalidRect: self bounds.	(Delay forMilliseconds: 100) wait.	flash := false.	self invalidRect: self bounds] fork.	scopes do: [:s | s received: aSignal].		aSignal detect: [:e | (e isKindOf: Association) and: [e key = #body]]		ifFound: [:body | 			body value detect: [:e | e key = #name]				ifFound: [:set | 					name := set value.					self invalidRect: self bounds.					scopes do: [:s | s nameChanged: name]]				ifNone: [].							body value detect: [:e | e key = #in]				ifFound: [:set | 					path := set value]				ifNone: []			]		ifNone: [].! !!Zell methodsFor: 'as yet unclassified' stamp: 'NM 8/29/2018 12:38'!receiveNotMy: aSignal! !!Zell methodsFor: 'copying' stamp: 'NM 8/28/2018 17:09'!duplicate	^ super duplicate		color: (((Color wheel: 24) atRandom) mixed: 0.7 with: Color white);		yourself.! !!Zell methodsFor: 'submorphs-add/remove' stamp: 'NM 8/28/2018 16:36'!delete	scopes do: [:s | s detach].	super delete.! !!Zell methodsFor: 'drawing' stamp: 'NM 8/29/2018 15:13'!drawOn: aCanvas	flash 		ifTrue: [aCanvas fillOval: self bounds color: (self color mixed: 0.5 with: Color black)]		ifFalse: [aCanvas fillOval: self bounds color: (self color alpha: 0.1)].	aCanvas frameOval: self bounds width: 2 color: self color.	name ifNotNil: [		aCanvas drawString: name at: self topLeft + (10@(5)) font: nil color: Color yellow].! !!Zell methodsFor: 'initialization' stamp: 'NM 8/29/2018 12:35'!initialize	super initialize.	scopes := Set new.	flash := false.		self extent: 50@50.	self color: (((Color wheel: 24) atRandom) mixed: 0.7 with: Color white).	self clipSubmorphs: true.! !!Zell methodsFor: 'testing' stamp: 'NM 8/28/2018 15:38'!name	^ name! !!Zell methodsFor: 'dropping/grabbing' stamp: 'NM 8/29/2018 15:27'!acceptDroppingMorph: aMorph event: evt! !!Zell methodsFor: 'dropping/grabbing' stamp: 'NM 8/29/2018 16:17'!wantsDroppedMorph: aMorph event: evt	^ aMorph isKindOf: ScopeConnector.! !Zell subclass: #ContainerZell	instanceVariableNames: 'inhabitants'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ContainerZell methodsFor: 'as yet unclassified' stamp: 'NM 8/28/2018 15:52'!attach: aScope	super attach: aScope.	inhabitants do: [:i | aScope inhabitantAdded: i].! !!ContainerZell methodsFor: 'as yet unclassified' stamp: 'NM 8/29/2018 10:40'!drawOn: aCanvas	super drawOn: aCanvas.	1 to: inhabitants size do: [:i | aCanvas frameOval: (Rectangle center: (self leftCenter + ((i*10+2)@0)) extent: 5) width: 1 color: Color white]! !!ContainerZell methodsFor: 'as yet unclassified' stamp: 'NM 8/28/2018 16:48'!inhabitants	^ inhabitants! !!ContainerZell methodsFor: 'as yet unclassified' stamp: 'NM 8/28/2018 15:44'!initialize	super initialize.	inhabitants := Set new.! !!ContainerZell methodsFor: 'as yet unclassified' stamp: 'NM 8/29/2018 12:41'!receiveMy: aSignal	| inhabitant |	super receiveMy: aSignal.		aSignal detect: [:e | e key = #body]		ifFound: [:body | 						body value detect: [:e | e key = #add]				ifFound: [:add | 					inhabitant := ZellSerDes new inflate: add value.					inhabitant receive: {#body -> {#in -> (self fullName , '/')}}.					inhabitants add: inhabitant.					self invalidRect: self bounds.					scopes do: [:s | s inhabitantAdded: inhabitant]]				ifNone: [].						body value detect: [:e | e key = #name]				ifFound: [:set | 					inhabitants do: [:i | i receive: {#body -> {#in -> (self fullName , '/')}}]]				ifNone: [].						body value detect: [:e | e key = #in]				ifFound: [:set | 					inhabitants do: [:i | i receive: {#body -> {#in -> (self fullName , '/')}}]]				ifNone: [].		]		ifNone: []! !!ContainerZell methodsFor: 'as yet unclassified' stamp: 'NM 8/29/2018 12:39'!receiveNotMy: aSignal	inhabitants do: [:i | i receive: aSignal]! !Zell subclass: #TextZell	instanceVariableNames: 'value'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!TextZell methodsFor: 'as yet unclassified' stamp: 'NM 8/28/2018 14:56'!attach: aScope	super attach: aScope.	aScope valueChanged: value.! !!TextZell methodsFor: 'as yet unclassified' stamp: 'NM 8/28/2018 14:35'!drawOn: aCanvas	super drawOn: aCanvas.	aCanvas drawString: value at: self leftCenter - (-10@5) font: nil color: Color white.! !!TextZell methodsFor: 'as yet unclassified' stamp: 'NM 8/28/2018 12:54'!initialize	super initialize.	value := ''.! !!TextZell methodsFor: 'as yet unclassified' stamp: 'NM 8/29/2018 12:41'!receiveMy: aSignal	super receiveMy: aSignal.		aSignal detect: [:e | (e isKindOf: Association) and: [e key = #body]]		ifFound: [:body | body value detect: [:e | e key = #set]			ifFound: [:set | 				value := set value. 				self invalidRect: self bounds.				scopes do: [:s | s valueChanged: value]]			ifNone: []]		ifNone: []! !!TextZell methodsFor: 'as yet unclassified' stamp: 'NM 8/28/2018 15:27'!value	^ value! !Object subclass: #ZellSerDes	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'zells-eight'!!ZellSerDes methodsFor: 'as yet unclassified' stamp: 'NM 8/29/2018 11:43'!inflate: aSignal	| inflated |		(aSignal isKindOf: String) ifTrue: [		^ TextZell new receive: {#body -> {#set -> aSignal}}; yourself].		(aSignal isKindOf: Association) ifTrue: [		^ (self inflate: aSignal value) receive: {#body -> {#name -> aSignal key}}; yourself].		(aSignal isKindOf: Collection) ifTrue: [		inflated := ContainerZell new.		aSignal do: [:e | inflated receive: {#body -> {#add -> e}}].		^ inflated].		^ Zell new! !!ZellSerDes methodsFor: 'as yet unclassified' stamp: 'NM 8/29/2018 11:43'!serialize: aZell	| serialized |		serialized := nil.	(aZell isKindOf: TextZell) ifTrue: [		serialized := aZell value].		(aZell isKindOf: ContainerZell) ifTrue: [		serialized := aZell inhabitants collect: [:i | self serialize: i]].		(aZell name ifNotNil: [		serialized := aZell name -> serialized]).		^ serialized.! !